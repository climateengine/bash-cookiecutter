#!/bin/bash

# ARG_POSITIONAL_SINGLE([positional_1])
# ARG_POSITIONAL_SINGLE([positional_2])
# ARG_OPTIONAL_INCREMENTAL([verbose],[v],[Increase verbosity (can be repeated e.g. -vvv)])
# ARG_OPTIONAL_INCREMENTAL([quiet],[q],[Decrease verbosity (can be repeated e.g. -qq)])
# ARG_OPTIONAL_SINGLE([log],[l],[log to FILE],[/dev/stdout])
# ARG_DEFAULTS_POS([])
# ARG_HELP([<The general help message of my script>])
# ARGBASH_GO()

# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='vqlh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_positional_1=
_arg_positional_2=
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_verbose=0
_arg_quiet=0
_arg_log="/dev/stdout"


print_help()
{
	printf '%s\n' "<The general help message of my script>"
	printf 'Usage: %s [-v|--verbose] [-q|--quiet] [-l|--log <arg>] [-h|--help] <positional_1> <positional_2>\n' "$0"
	printf '\t%s\n' "-v, --verbose: Increase verbosity (can be repeated e.g. -vvv)"
	printf '\t%s\n' "-q, --quiet: Decrease verbosity (can be repeated e.g. -qq)"
	printf '\t%s\n' "-l, --log: log to FILE (default: '/dev/stdout')"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-v|--verbose)
				_arg_verbose=$((_arg_verbose + 1))
				;;
			-v*)
				_arg_verbose=$((_arg_verbose + 1))
				_next="${_key##-v}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-v" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-q|--quiet)
				_arg_quiet=$((_arg_quiet + 1))
				;;
			-q*)
				_arg_quiet=$((_arg_quiet + 1))
				_next="${_key##-q}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-q" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-l|--log)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_log="$2"
				shift
				;;
			--log=*)
				_arg_log="${_key##--log=}"
				;;
			-l*)
				_arg_log="${_key##-l}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'positional_1' and 'positional_2'"
	test "${_positionals_count}" -ge 2 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 2 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 2 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 2 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_positional_1 _arg_positional_2 "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


# Set up Logging
exec 3>&1 # logging stream (file descriptor 3) defaults to STDOUT
verbosity=3 # default to show warnings
silent_lvl=0
fat_lvl=1
err_lvl=2
wrn_lvl=3
inf_lvl=4
dbg_lvl=5

notify() { log $silent_lvl "NOTE: $1"; } # Always prints
fatal() { log $fat_lvl "FATAL: $1"; }
error() { log $err_lvl "ERROR: $1"; }
warn() { log $wrn_lvl "WARNING: $1"; }
info() { log $inf_lvl "INFO: $1"; }
debug() { log $dbg_lvl "DEBUG (ln ${BASH_LINENO[$((${#BASH_LINENO[@]} - 2))]}): $1"; }
log() {
    if [ $verbosity -ge $1 ]; then
        datestring=$(date +'%Y-%m-%d %H:%M:%S')
        # Expand escaped characters, wrap at 70 chars, indent wrapped lines
        echo -e "$datestring $2" | fold -w70 -s | sed '2~1s/^/  /' >&3
    fi
}

# Set verbosity level from argbash
verbosity=$((verbosity + _arg_verbose ))
verbosity=$((verbosity - _arg_quiet ))

# Set log file from argbash
exec 3>>"$_arg_log"


# vvv  PLACE YOUR CODE HERE  vvv

# For example:
printf "Value of '%s': %s\\n" 'positional_1' "$_arg_positional_1"
printf "Value of '%s': %s\\n" 'positional_2' "$_arg_positional_2"


notify "notify message - always notifies regardless of log level"
fatal "fatal message"
error "error message"
warn "warning message"
info "info message"
debug "debug message"


# ^^^  TERMINATE YOUR CODE BEFORE THE BOTTOM ARGBASH MARKER  ^^^

# ] <-- needed because of Argbash
